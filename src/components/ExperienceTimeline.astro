---
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';
import type { TranslationKey } from '../i18n/ui';

export interface Props {
  t: (key: TranslationKey) => string;
  lang: string;
}

const { t, lang } = Astro.props;

// Fetch all experience entries
const experiences = await getCollection('experience');
// Sort experiences by start date (most recent first)
const sortedExperiences = experiences.sort((a: CollectionEntry<'experience'>, b: CollectionEntry<'experience'>) => {
  return new Date(b.data.startDate).getTime() - new Date(a.data.startDate).getTime();
});

// Format date function
function formatDate(dateString: string, locale: string) {
  const date = new Date(dateString);
  return date.toLocaleDateString(locale, { 
    year: 'numeric', 
    month: 'short' 
  });
}

// Calculate duration with proper translations
function calculateDuration(start: string, end: string | undefined, t: (key: TranslationKey) => string) {
  const startDate = new Date(start);
  const endDate = end ? new Date(end) : new Date();
  const months = (endDate.getFullYear() - startDate.getFullYear()) * 12 + 
                 (endDate.getMonth() - startDate.getMonth());
  const years = Math.floor(months / 12);
  const remainingMonths = months % 12;
  
  const yearText = years === 1 ? t('experience.year' as TranslationKey) : t('experience.years' as TranslationKey);
  const monthText = remainingMonths === 1 ? t('experience.month' as TranslationKey) : t('experience.months' as TranslationKey);
  
  if (years > 0 && remainingMonths > 0) {
    return `${years} ${yearText}, ${remainingMonths} ${monthText}`;
  } else if (years > 0) {
    return `${years} ${yearText}`;
  } else {
    return `${remainingMonths} ${monthText}`;
  }
}
---
<div class="relative">
  <!-- Vertical timeline line -->
  <div class="absolute left-8 top-0 bottom-0 w-0.5 bg-gradient-to-b from-primary via-primary/50 to-transparent md:block hidden"></div>

  <!-- Experience items -->
  <div class="space-y-12">
    {sortedExperiences.map((experience: CollectionEntry<'experience'>) => (
      <div class="relative flex items-start group">
        <!-- Timeline dot (hidden on mobile) -->
        <div class="absolute left-8 w-4 h-4 bg-background border-2 border-primary rounded-full -translate-x-1/2 z-10 group-hover:scale-125 transition-transform md:block hidden">
          <div class="absolute inset-1 bg-primary rounded-full animate-pulse"></div>
        </div>

        <!-- Date label -->
        <div class="w-full md:w-32 text-left md:text-right md:pr-8 pt-1 mb-2 md:mb-0">
          <div class="text-sm font-semibold text-primary">
            {formatDate(experience.data.startDate, lang)}
          </div>
          <div class="text-xs text-muted-foreground">
            {experience.data.endDate ? formatDate(experience.data.endDate, lang) : t('experience.present' as TranslationKey)}
          </div>
          <div class="text-xs text-muted-foreground mt-1">
            ({calculateDuration(experience.data.startDate, experience.data.endDate, t)})
          </div>
        </div>

        <!-- Content card -->
        <div class="flex-1 md:ml-12 group">
          <div class="bg-card/50 backdrop-blur border border-border rounded-lg p-6 hover:shadow-lg transition-all duration-300 hover:border-primary/50">
            <!-- Company and position -->
            <div class="mb-3">
              <h3 class="text-xl font-semibold text-foreground group-hover:text-primary transition-colors">
                {experience.data.position}
              </h3>
              <div class="flex items-center gap-2 text-muted-foreground flex-wrap">
                <span class="font-medium">{experience.data.company}</span>
                {experience.data.location && (
                  <>
                    <span class="hidden sm:inline">•</span>
                    <span class="text-sm">{experience.data.location}</span>
                  </>
                )}
                {experience.data.type && (
                  <>
                    <span class="hidden sm:inline">•</span>
                    <span class="text-sm capitalize">{experience.data.type.replace('-', ' ')}</span>
                  </>
                )}
              </div>
            </div>

            <!-- Description -->
            <p class="text-muted-foreground mb-4">
              {experience.data.description}
            </p>

            <!-- Technologies -->
            {experience.data.technologies && experience.data.technologies.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {experience.data.technologies.map((tech: string) => (
                  <span class="px-3 py-1 text-xs font-medium bg-primary/10 text-primary rounded-full border border-primary/20">
                    {tech}
                  </span>
                ))}
              </div>
            )}
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Timeline end gradient (hidden on mobile) -->
  <div class="absolute left-8 bottom-0 w-4 h-4 bg-primary/20 rounded-full -translate-x-1/2 blur-md md:block hidden"></div>
</div>

<style>
  /* Add custom animations */
  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .group {
    animation: fadeIn 0.6s ease-out forwards;
    opacity: 0;
  }

  .group:nth-child(1) { animation-delay: 0.1s; }
  .group:nth-child(2) { animation-delay: 0.2s; }
  .group:nth-child(3) { animation-delay: 0.3s; }
  .group:nth-child(4) { animation-delay: 0.4s; }
  .group:nth-child(5) { animation-delay: 0.5s; }
</style>