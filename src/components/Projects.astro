---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import Section from "@/layouts/Section.astro";
import SectionTitle from "./SectionTitle.astro";
import { getCollection } from "astro:content";
import { formatDate, isCurrent, sortProjectsByDate } from "@/lib/date";
import type { CollectionEntry } from "astro:content";
import { BadgeCheck, ExternalLink, LockKeyhole } from "lucide-react";
import { FaGithub } from "react-icons/fa";
import { cn } from "@/lib/utils";
import '@splidejs/splide/css';

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);

const collectionName = `projects-${lang}` as const;
const projects = await getCollection(collectionName);

const sortedProjects: CollectionEntry<typeof collectionName>[] = sortProjectsByDate(projects);
---
<Section id={t('nav.projects')}>
  <SectionTitle title={t('projects.title')} />
  <div class="flex flex-col gap-8">
    {sortedProjects.map((project) => {

      const hasMedia = (project.data.videosUrl && project.data.videosUrl.length > 0) || (project.data.imagesUrl && project.data.imagesUrl?.length > 0);
      const hasJustOneVideo = project.data.videosUrl && project.data.videosUrl.length === 1 && (!project.data.imagesUrl || project.data.imagesUrl.length === 0);
      const hasJustOneImage = project.data.imagesUrl && project.data.imagesUrl.length === 1 && (!project.data.videosUrl || project.data.videosUrl.length === 0);

      return (
        <div class="relative">
          {isCurrent(project.data.endDate) && (
            <div class="absolute bg-primary/15 w-full h-full rounded-lg inset-0 blur-xl"></div>
          )}
          <div 
            id={String(project.data.id)} 
            class={cn("relative border bg-background p-8 rounded-lg space-y-4", 
              isCurrent(project.data.endDate) ? "border-primary/50" : ""
            )}
          >
            {isCurrent(project.data.endDate) && (
              <div class="absolute top-4 right-4 w-2 h-2 bg-primary rounded-full grid place-content-center">
                <div class="w-4 h-4 bg-primary/50 rounded-full animate-pulse"></div>
              </div>
            )}
            <div class="flex flex-wrap gap-2 items-center justify-between">
              <div class="flex flex-wrap items-center gap-2 md:gap-4">
                <h3 class="text-xl w-fit font-semibold bg-clip-text text-transparent bg-gradient-to-r from-foreground to-foreground/80 dark:to-foreground/70">{project.data.title}</h3>
                <div class="flex items-center gap-2">
                  {project.data.name && (
                    <div class="flex items-center gap-2 text-primary bg-primary/10 px-2 rounded-full border border-primary/30">
                      <BadgeCheck size="18px" />
                      <p class="text-lg font-semibold whitespace-nowrap">
                        {project.data.name}
                      </p>
                    </div>
                  )}
                  {project.data.githubUrl ? (
                    <a href={project.data.githubUrl} target="_blank" rel="noopener noreferrer" class="flex items-center gap-2 rounded-full border bg-background shadow-xs hover:bg-accent hover:text-accent-foreground dark:bg-background dark:border-input dark:hover:bg-muted [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 h-8 px-3 has-[>svg]:px-2.5" aria-label="GitHub repository" >
                      <FaGithub client:load />
                      <ExternalLink client:load />
                    </a>
                  ) : (
                    <span class="border rounded-full p-2 text-xs text-muted-foreground">
                      <LockKeyhole className="size-4 text-foreground" client:load /> 
                    </span>
                  )}
                </div>
              </div>
              <div class="flex gap-2 items-center text-muted-foreground">
                <span class="text-sm font-medium first-letter:uppercase">
                  {formatDate(project.data.startDate, lang)}
                </span>
                <span>â†’</span>
                <span class="text-sm font-medium first-letter:uppercase">
                  {isCurrent(project.data.endDate)
                    ? <span class="bg-primary/15 px-1 rounded-md">{t('projects.present')}</span>
                    : formatDate(project.data.endDate, lang)
                  }
                </span>
              </div>
            </div>
            {project.data.description && project.data.description.length > 0 && (
              <ul class="relative space-y-2 text-sm text-foreground/70">
                {project.data.description.map((item: string) => (
                  <li class="flex items-baseline leading-6 gap-2">
                    <span class="size-2 border-2 border-primary rounded-full flex-shrink-0" />
                    <p>
                      {item}
                    </p>
                  </li>
                ))}
              </ul>
            )}
            {project.data.technologies && project.data.technologies.length > 0 && (
              <div class="flex flex-wrap gap-2">
                {project.data.technologies.map((tech) => (
                  <span class="inline-flex items-center px-2 py-1 bg-foreground/5 text-foreground rounded-md text-sm font-medium">
                    {tech}
                  </span>
                ))}
              </div>
            )}
            {hasJustOneVideo && project.data.videosUrl ? (
              <div class="flex items-center justify-center bg-foreground/5 rounded-lg overflow-hidden">
                <video 
                  controls 
                  class="object-contain w-full h-full"
                  preload="metadata"
                  autoplay
                  muted
                  loop
                >
                  <source src={project.data.videosUrl[0].webm} type="video/webm" />
                  <source src={project.data.videosUrl[0].mp4} type="video/mp4" />
                  Your browser does not support the video tag.
                </video>
              </div>
            ) : hasJustOneImage && project.data.imagesUrl ? (
              <div class="flex items-center justify-center bg-foreground/5 rounded-lg overflow-hidden">
                <img 
                  src={project.data.imagesUrl[0]} 
                  alt={`${project.data.title} screenshot`}
                  loading="lazy"
                  class="object-contain w-full h-full"
                />
              </div>
            ) : hasMedia && (
              <div id={`splide-${project.data.id}`} class="splide" aria-label="Project media">
                <div class="splide__track">
                  <ul class="splide__list">
                    {project.data.videosUrl?.map((video, _) => (
                      <li class="splide__slide">
                        <div class="relative w-full h-full flex items-center justify-center bg-foreground/5 rounded-lg overflow-hidden">
                          <video 
                            controls 
                            class="object-contain"
                            preload="metadata"
                            autoplay
                            muted
                            loop
                          >
                            <source src={video.webm} type="video/webm" />
                            <source src={video.mp4} type="video/mp4" />
                            Your browser does not support the video tag.
                          </video>
                        </div>
                      </li>
                    ))}
                    {project.data.imagesUrl?.map((imageUrl, index) => (
                        <li class="splide__slide">
                          <div class="relative w-full h-full flex items-center justify-center bg-foreground/5 rounded-lg overflow-hidden">
                            <img 
                              src={imageUrl} 
                              alt={`${project.data.title} screenshot ${index + 1}`}
                              loading="lazy"
                              decoding="async"
                            />
                          </div>
                        </li>
                    ))}
                  </ul>
                </div>
              </div>
            )}
          </div>
        </div>
      );
    })}
  </div>
</Section>

<script>
  import Splide from '@splidejs/splide';

  document.addEventListener( 'DOMContentLoaded', function() {
    var splide = new Splide( '.splide' );
    splide.mount();
  } );
</script>