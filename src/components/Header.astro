---
import { getLangFromUrl, useTranslations } from "@/i18n/utils";
import LanguageSelect from "./LanguageSelect";
import { languages } from "@/i18n/ui";
import { getRelativeLocaleUrl } from "astro:i18n";
import ThemeToggle from "./ThemeToggle";
import NavBar from "./NavBar.astro";
import SideBar from "./SideBar";

const defaultLocale = "es";
const locales = ["es", "en"];

const currentLang = getLangFromUrl(Astro.url);
const currentPath = Astro.url.pathname;
const t = useTranslations(currentLang);

function getBasePath(path: string, currentLang: string, defaultLocale: string) {
  if (currentLang === defaultLocale) {
    return path;
  } else {
    return path.replace(`/${currentLang}`, '') || '/';
  }
}

const basePath = getBasePath(currentPath, currentLang, defaultLocale);

const languageOptions = locales.map((lang) => {
  const url = getRelativeLocaleUrl(lang, basePath);
  return {
    value: lang,
    label: languages[lang as keyof typeof languages],
    url: url
  };
});

const themeLabels = {
  light: t('theme.light'),
  dark: t('theme.dark'),
  system: t('theme.system'),
  toggleTheme: t('theme.toggle'),
  lightMode: t('theme.lightMode'),
  darkMode: t('theme.darkMode'),
  autoMode: t('theme.autoMode')
};

const pages = [
  {
    name: t('nav.home'),
    url: `#${t('nav.home')}`
  },
  {
    name: t('nav.experience'),
    url: `#${t('nav.experience')}`
  },
  {
    name: t('nav.projects'),
    url: `#${t('nav.projects')}`
  },
  {
    name: t('nav.education'),
    url: `#${t('nav.education')}`
  },
  {
    name: t('nav.contact'),
    url: `#${t('nav.contact')}`
  },
]
---
<div class="fixed bg-background/60 backdrop-blur-3xl w-[100vw] border-b p-4 px-8 z-10 flex justify-center">
  <div class="flex items-center justify-between w-full md:max-w-[1200px]">
    <SideBar 
      pages={pages}
      client:load 
    />
    <NavBar 
      pages={pages}
    />
    <div class="flex gap-4">
      <LanguageSelect 
        client:load
        options={languageOptions}
        currentLang={currentLang}
      />
      <ThemeToggle 
        client:load
        labels={themeLabels}
      />
    </div>
  </div>
</div>